image::images/tiger-looking-left-small.png[]

[[ACS_DesignAndImplementation]]
== Design and implementation

=== Tigase Halcyon

*Halcyon* is a multiplatform extensible XMPP client library

=== Design

image::images/architecture.png[]

== Usage

== Test

[source,java]
----
		PingModule module = halcyon.getModules().getModule(PingModule.TYPE);

		Request request = module.ping(JID.parse("bmalkow@sure.im"));

		request.response(new Request.Callback() {
			@Override
			public void success(Request request, Element responseStanza) {
				System.out.println("PONG");
			}

			@Override
			public void error(Request request, Element responseStanza, ErrorCondition errorCondition) {
				System.out.println("ERROR: " + errorCondition);
			}

			@Override
			public void timeout(Request request) {
				System.out.println("TIMEOUT");
			}
		});

		Element iq = ElementBuilder.create("iq")
				.attribute("to", "a@b.c/1")
				.attribute("type", "get")
				.attribute("id", "123")
				.child("ping")
				.xmlns("urn:xmpp:ping")
				.build();
----

a tutaj:

[source,Kotlin]
----
	val module = halcyon.modules.getModule<PingModule>(PingModule.TYPE)
	val request = module.ping("bmalkow@sure.im".toJID())
	request.response(object : Request.Callback {
		override fun success(request: Request, responseStanza: Element) {
			println("PONG")
		}

		override fun error(request: Request, responseStanza: Element, errorCondition: ErrorCondition) {
			println("ERROR: $errorCondition")
		}

		override fun timeout(request: Request) {
			println("TIMEOUT")
		}
	})

	request.response { request, element, result ->
		when (result) {
			is Request.Result.Success -> println("PONG")
			is Request.Result.Error -> println("ERROR: ${result.errorCondition}")
//			is Request.Result.Timeout -> println("TIMEOUT")
		}
	}

	request.handle {
		success { request, element -> println("PONG") }
		error { request, element, errorCondition -> println("ERROR: $errorCondition") }
	}

	val iq = element("iq") {
		attribute("to", "a@b.c/1")
		attribute("type", "get")
		attribute("id", "123")
		"ping"{
			xmlns = "urn:xmpp:ping"
		}
	}
----
